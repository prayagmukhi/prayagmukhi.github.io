@mixin placeholder-input($input:'') {
  #{$input}::-webkit-input-placeholder { @content; }
  #{$input}:-moz-placeholder { @content; }
  #{$input}::-moz-placeholder { @content; }
  #{$input}::-ms-input-placeholder { @content; }
}

@mixin placeholder-textarea($textarea, $color) {
  #{$textarea} textarea::-webkit-input-placeholder { color:$color; }
  #{$textarea} textarea:-moz-placeholder { color:$color; }
  #{$textarea} textarea::-moz-placeholder { color:$color; }
  #{$textarea} textarea::-ms-input-placeholder { color:$color; }
}





@function long-shadow($direction, $length, $color, $fade: false, $shadow-count: 100) {
  $shadows: ();
  $conversion-map: ( 
    to top: 180deg, 
    to top right: 135deg, 
    to right top: 135deg,
    to right: 90deg,
    to bottom right: 45deg,
    to right bottom: 45deg,
    to bottom: 0deg,
    to bottom left: 315deg,
    to left bottom: 315deg,
    to left: 270deg,
    to left top: 225deg,
    to top left: 225deg
  );
  
  @if map-has-key($conversion-map, $direction) {
    $direction: map-get($conversion-map, $direction);
  }
  
  @for $i from 1 through $shadow-count {
    $current-step: ($i * $length / $shadow-count);
    $current-color: if(not $fade, $color, if(type-of($fade) == 'color',  mix($fade, $color, ($i / $shadow-count * 100)), rgba($color, 1 - $i / $shadow-count)));
    
    $shadows: append($shadows, (sin(0deg + $direction) * $current-step) (cos(0deg + $direction) * $current-step) 0 $current-color, 'comma');
  }
  
  @return $shadows;
}







@function set-contrast-color($color, $dark, $light) {
  @if (lightness($color) > 50) {
    @return $dark; // Lighter backgorund, return dark color
  } @else {
    @return $light; // Darker background, return light color
  }
}




@mixin coloring($list, $prefix:'', $parent:true){
  @each $color in $list {
    @if not $parent {
      @at-root {
        .#{$prefix}#{nth($color,1)} {
          $color : nth($color,2) !global;
          $name-color : nth($color,1) !global;
          @content;
        }
      }
    } @else {
      &.#{$prefix}#{nth($color,1)} {
        $color : nth($color,2) !global;
        $name-color : nth($color,1) !global;
        @content;
      }
    }
  } // @each
} // @mixin


// use: @include coloring($colors, btn-, false) { }















 
@function color-diff($a, $b) {
  $sat: saturation($a) - saturation($b);
  $lig:  lightness($a) -  lightness($b);
  $fn-sat: if($sat > 0, 'desaturate', 'saturate');
  $fn-lig: if($lig > 0, 'darken', 'lighten');
  
  @return (
    adjust-hue: -(hue($a) - hue($b)),
    #{$fn-sat}: abs($sat),
    #{$fn-lig}: abs($lig)
  );
}

@function palette-diff($palette) {
  $base: map-get($palette, base);
  $colors: map-get($palette, colors);
  
  $diffs: ();
  
  @each $color in $colors {
    $diffs: append($diffs, color-diff($base, $color));
  }
  
  @return $diffs;
}

$base-palette: (
  base: #c05b5b, 
  colors: #edc1b7
) !default;

$palette-diffs: palette-diff($base-palette);

@function apply-diff($color, $diff) {
  @each $key, $value in $diff {
    $color: call($key, $color, $value);
  }
  
  @return $color;
}

@function alt-color($base-color) {
  $colors: ();
  
  @each $diff in $palette-diffs {
    $colors: append($colors, apply-diff($base-color, $diff));
  }
  
  @return $colors;
}












@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}










@mixin nth($list, $selector: ':not') {
  @if type-of($list) != list {
    @warn "Invalid number for `nth`.";
  }
   
  @else {
    $generated-selector: '';
    
    @for $i from 1 to length($list) {
      $generated-selector: #{$generated-selector + $selector + "(" + nth($list, $i) + ")" };
    }
    
    &#{$generated-selector} {
      @content;
    }
  }
}




